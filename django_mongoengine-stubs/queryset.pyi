from mongoengine import Document
from mongoengine import queryset as qs
from typing import TypeVar, Any, Type, Optional

_DT = TypeVar('_DT', bound=Document)
class QuerySet(qs.QuerySet[_DT]):

    @property
    def model(self: QuerySet[_DT]) -> Type[_DT]: ...

    @property
    def query(self: QuerySet[_DT]) -> Any: ...

    @property
    def _prefetch_related_lookups(self) -> Any: ...

    def iterator(self: QuerySet[_DT]) -> QuerySet[_DT]: ...

    def get_queryset(self: QuerySet[_DT]) -> QuerySet[_DT]: ...

    def latest(self: QuerySet[_DT], field_name: str) -> Optional[_DT]: ...

    def earliest(self: QuerySet[_DT], field_name: str) -> Optional[_DT]: ...

    def exists(self) -> bool: ...


    def _clone(self: QuerySet[_DT]) -> QuerySet[_DT]: ...

    @property
    def ordered(self) -> bool: ...

    def get_or_create(**kwargs: Any) -> _DT: ...

class QuerySetManager(qs.QuerySetManager): 
    def __get__(self, instance: object, cls: Type[_DT]) -> QuerySet[_DT]: ...

